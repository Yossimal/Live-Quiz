// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum MediaType {
  IMAGE
  VIDEO
  NONE
}

model User {
  id        Int       @id @default(autoincrement())
  varified  Boolean   @default(false)
  email     String    @unique
  firstName String?
  lastName  String?
  password  String
  birthday  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      Role      @default(USER)
  games     Game[]

  @@index([email])
}

model QuestionOption {
  id         Int      @id @default(autoincrement())
  data       String
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  isCorrect  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Question {
  id        Int              @id @default(autoincrement())
  question  String
  options   QuestionOption[]
  game      Game             @relation(fields: [gameId], references: [id])
  gameId    Int
  media     String?
  mediaType MediaType        @default(NONE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Game {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  image       String
  questions   Question[]
  creatorId   Int
  creator     User         @relation(fields: [creatorId], references: [id])
  onlineGames OnlineGame[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model OnlineGame {
  id        Int      @id @default(autoincrement())
  gameId    Int
  game      Game     @relation(fields: [gameId], references: [id])
  players   Player[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Player {
  id     Int        @id @default(autoincrement())
  score  Int
  gameId Int
  game   OnlineGame @relation(fields: [gameId], references: [id])
}

model EmailValidationTokens {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique @default(uuid())
  expiresAt DateTime @default(dbgenerated("(CURRENT_TIMESTAMP + INTERVAL 1 DAY)"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetTokens {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique @default(uuid())
  expiresAt DateTime @default(dbgenerated("(CURRENT_TIMESTAMP + INTERVAL 5 MINUTE)"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
